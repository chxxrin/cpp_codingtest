#include <iostream>

using namespace std;

int n;
long long d[100][2]; // 이친수의 개수를 저장하는 DP 배열

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;

    // 초기 상태 설정
    d[1][0] = 0; // 길이 1의 이친수 중 끝자리가 0인 이친수는 없음
    d[1][1] = 1; // 길이 1의 이친수 중 끝자리가 1인 이친수는 "1"

    // DP를 이용한 이친수 개수 계산
    for(int i=2; i<=n; i++) {
        d[i][0] = d[i-1][0] + d[i-1][1]; // 길이 i에서 끝자리가 0인 이친수는 이전 길이에서 끝자리가 0이거나 1인 이친수에 0을 붙인 것
        d[i][1] = d[i-1][0]; // 길이 i에서 끝자리가 1인 이친수는 이전 길이에서 끝자리가 0인 이친수에 1을 붙인 것, 이친수의 정의상 1이 두 번 연속 나타나지 않아야 하기 때문
    }

    // 결과 출력: 길이 n에서 끝자리가 0이거나 1인 이친수의 총 개수
    cout << d[n][0] + d[n][1];
}
