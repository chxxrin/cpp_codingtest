#include <iostream>

using namespace std;

int d[1000005];
int n;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    d[1] = 0; // 초기값
    for(int i=2;i<=n;i++) {
        d[i] = d[i-1] + 1;
        if(i%2 == 0) d[i] = min(d[i], d[i/2]+1);
        if(i%3 == 0) d[i] = min(d[i], d[i/3]+1);
    }
    cout << d[n];
}

// 1463: 1로 만들기 (bfs로도 가능함)
// 1. 테이블 정의 하기 : d[i]=i를 1로 만들기 위해 필요한 연산 사용 횟수의 최솟값
// 2. 점화식 찾기 : d[12] = 3으로 나누거나(d[12]=d[4]+1), 2로 나누거나 (d[12]=d[6]+1), 1을 빼거나 (d[12]=d[11]+1)
// -> 즉 d[12] = min(d[4]+1, d[6]+1, d[11]+1)
// 2. 점화식 찾기 : d[k] = 3으로 나누거나(d[k]=d[k/3]+1), 2로 나누거나 (d[k]=d[k/2]+1), 1을 빼거나 (d[k]=d[k-1]+1)
// -> 즉 d[12] = min(d[k/3]+1, d[k/2]+1, d[k-1]+1)
// 3. 초기값 정의하기 : d[1] = 1 만 정의하면 